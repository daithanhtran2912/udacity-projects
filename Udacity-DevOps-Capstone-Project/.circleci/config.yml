version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3

jobs:
  lint-code:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Install dependencies
          command: |
            echo "Setup Python virtual environment..."
            make setup
            echo "Install dependencies..."
            make install
            echo "Install hadolint..."
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 && \
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./devenv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Linting code
          command: |
            make activate
            make lint

  build-and-push-docker-image:
    docker:
      - image: cimg/python:3.7
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.17
      - run:
          name: Build Docker image
          command: |
            docker build -t simple-hello-world-app:latest .
            docker images
      - run:
          name: Push image to Docker Hub
          command: |
            echo "Login to Docker Hub..."
            docker login --username "$DOCKER_HUB_USERNAME" --password "$DOCKER_HUB_PASSWORD"
            echo "Tag image..."
            docker tag simple-hello-world-app:latest "$DOCKER_HUB_USERNAME"/simple-hello-world-app:latest
            docker images
            echo "Push image to Docker Hub..."
            docker push "$DOCKER_HUB_USERNAME"/simple-hello-world-app:latest
  deploy-infrastructure:
    docker:
      - image: cimg/python:3.7
    parameters:
      cluster-name:
        description: Name of the EKS cluster
        type: string
        default: "simple-hello-world-app"
    steps:
      - checkout
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          aws-region: $AWS_DEFAULT_REGION
          node-type: t2.micro
          nodes: 2
          nodes-min: 2
          nodes-max: 2
          show-eksctl-command: true
          ssh-access: true
  configure-infrastructure:
    docker:
      - image: cimg/python:3.7
    parameters:
      cluster-name:
        description: Name of the EKS cluster
        type: string
        default: "simple-hello-world-app"
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          aws-region: $AWS_DEFAULT_REGION
          install-kubectl: true
          verbose: true
      - kubernetes/create-or-update-resource:
          resource-file-path: infrastructures/deployment.yml
          show-kubectl-command: true
      - run:
          name: Verify cluster
          command: |
            kubectl get nodes
            kubectl get deployment
            kubectl get pod -o wide
            kubectl get services

workflows:
  default:
    jobs:
      - lint-code
      - build-and-push-docker-image:
          requires:
            - lint-code
          filters:
            branches:
              only: [main]
      - deploy-infrastructure:
          requires:
            - build-and-push-docker-image
      - configure-infrastructure:
          requires:
            - deploy-infrastructure